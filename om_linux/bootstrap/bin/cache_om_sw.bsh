#!/bin/bash
#
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2018 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used
# and/or copied only with the written permission from Ericsson Radio
# Systems AB or in accordance with the terms and conditions stipulated
# in the agreement/contract under which the program(s) have been
# supplied.
#
# ********************************************************************
# Name    : cache_om_sw.bsh
# Date    : 30/07/2018
# Revision: A.1
# Purpose : Script handling the caching of the Ericsson O&M DVD
#
# Usage   : cache_om_sw.bsh -c <cache_dir> -d <om_sw_dir> 
#
# ********************************************************************
#
#   Command Section
#
# ********************************************************************
AWK=/usr/bin/awk
BASENAME=/usr/bin/basename
BC=/usr/bin/bc
BOOTADM=/usr/sbin/bootadm
CAT=/usr/bin/cat
CHMOD=/usr/bin/chmod
CHOWN=/usr/bin/chown
CLEAR=/usr/bin/clear
CMP=/usr/bin/cmp
CP=/usr/bin/cp
CPIO=/usr/bin/cpio
DATE=/usr/bin/date
DIRNAME=/usr/bin/dirname
DOMAINNAME=/usr/bin/domainname
DTCONFIG=/usr/dt/bin/dtconfig
DUMPADM=/usr/sbin/dumpadm
ECHO=/usr/bin/echo
EGREP=/usr/bin/egrep
EJECT=/usr/bin/eject
ENV=/usr/bin/env
EXPR=/usr/bin/expr
FIND=/usr/bin/find
FLARCREATE=/usr/sbin/flarcreate
FORMAT=/usr/sbin/format
FUSER=/usr/sbin/fuser
GETENT=/usr/bin/getent
GETTEXT=/usr/bin/gettext
GREP=/usr/bin/grep
GROUPADD=/usr/sbin/groupadd
GTAR=/usr/sfw/bin/gtar
GZCAT=/usr/bin/gzcat
HEAD=/usr/bin/head
HOSTNAME=/usr/bin/hostname
ID=/usr/bin/id
INIT=/usr/sbin/init
LS=/usr/bin/ls
MKDIR=/usr/bin/mkdir
MORE=/usr/bin/more
MV=/usr/bin/mv
PGREP=/usr/bin/pgrep
PING=/usr/sbin/ping
PWD=/usr/bin/pwd
RM=/usr/bin/rm
RCP=/usr/bin/rcp
RSH=/usr/bin/rsh
SED=/usr/bin/sed
SLEEP=/usr/bin/sleep
SORT=/usr/bin/sort
SU=/usr/bin/su
SWAP=/usr/sbin/swap
SYNC=/usr/sbin/sync
TAIL=/usr/bin/tail
TEE=/usr/bin/tee
TOUCH=/usr/bin/touch
TPUT=/usr/bin/tput
TR=/usr/bin/tr
UADMIN=/usr/sbin/uadmin
UNAME=/usr/bin/uname
USERADD=/usr/sbin/useradd
WC=/usr/bin/wc

# ********************************************************************
#
#       Configuration Section
#
# ********************************************************************

# ********************************************************************
#
#       Pre-execution Operations
#
# ********************************************************************

# Default cache dir location
DEF_CACHE_DIR="/var/tmp/OM_LIN_CACHE"

# ********************************************************************
#
#   functions
#
# ********************************************************************
### Function: abort_script ###
#
#   This will is called if the script is aborted thru an error
#   error signal sent by the kernel such as CTRL-C or if a serious
#   error is encountered during runtime
#
# Arguments:
#       $1 - Error message from part of program (Not always used)
# Return Values:
#       none
abort_script()
{
if [ "$1" ]; then
    _err_msg_=$1
else
    _err_msg_="ERROR : Script aborted.......\n"
fi
if [ "${LOGFILE}" ]; then
    $ECHO -e "\nERROR : $_err_msg_\n"|$TEE -a ${LOGFILE}
else
    $ECHO -e "\nERROR : $_err_msg_\n"
fi

cd $SCRIPTHOME

if [ "$2" ]; then
    ${2}
else
   exit 1
fi
}

### Function: check_id ###
#
#   Check that the effective id of the user is correct
#   If not print error msg and exit.
#
# Arguments:
#       $1 : User ID name
# Return Values:
#       none
#check_id()
#{
#_check_id_=`$ID  | $AWK -F\( '{print $2}' | $AWK -F\) '{print $1}'`
#if [ "$_check_id_" != "$1" ]; then
#    _err_msg_="You must be $1 to execute this script."
#    abort_script "$_err_msg_" "${EXEC_SHELL_CMD}"
#fi
#}

### Function: get_absolute_path ###
#
# Determine absolute path to software
#
# Arguments:
#   none
# Return Values:
#   none
get_absolute_path()
{
_dir_=`$DIRNAME $0`
SCRIPTHOME=`cd $_dir_ 2>/dev/null && pwd || $ECHO $_dir_`
}

### Function: usage_msg ###
#
# Print out usage message 
#
# Arguments:
#       none
# Return Values:
#       none
usage_msg()
{
$ECHO "
Usage: `$BASENAME $0` [ -c <cache_dir> ] -d <om_sw_dir> 
                      
options:

-c  : Full Path to directory to cache SW in. This directory will be created 
      if required but any existing files may be overwritten. If not specified
      then the default path ${DEF_CACHE_DIR} will be used.

-d  : Full Path to directory containing the O&M SW. All relevant data under 
      this path will be copied to the <cach-dir>.

"

}

# ********************************************************************
#
#   Main body of program
#
# ********************************************************************
#
# Determine absolute path to software
get_absolute_path

# Check that the effective id of the user is root
#check_id root

while getopts ":c:d:" arg; do
  case $arg in
     c) CACHE_DIR="$OPTARG"
        ;;
     d) OM_SW_DIR="$OPTARG"
        ;;
    \?) usage_msg
        exit 1
	;;
  esac
done
shift `expr $OPTIND - 1`

if [ ! "${OM_SW_DIR}" ]; then
    usage_msg
    exit 1
fi

if [ ! "${CACHE_DIR}" ]; then
    CACHE_DIR=${DEF_CACHE_DIR}
fi

# Strip off duplicate and trailing '/'
OM_SW_DIR=`$ECHO ${OM_SW_DIR}|$SED -e 's/\/[\/]*/\//g' -e 's/[\/]*$//g'`
if [ ! -d ${OM_SW_DIR} ]; then
    _err_msg_="Directory ${OM_SW_DIR} not found"
    abort_script "$_err_msg_"
fi

$RM -rf ${CACHE_DIR}
$MKDIR -p ${CACHE_DIR}
if [ $? -ne 0 ]; then
    _err_msg_="Could not create cache directory ${OM_SW_DIR}"
    abort_script "$_err_msg_"
fi


exit 0

